/*
Copyright (c) Anthony Beaumont
This source code is licensed under the MIT License
found in the LICENSE file in the root directory of this source tree.
*/

import { arch } from "node:process";
import ref from "ref-napi";

/*
⚠️ The following might be incorrect and / or incomplete.
    Take it with a grain of salt as it is a "written and checked as I need it" kinda of thing.
    //Source: https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types?redirectedfrom=MSDN
*/

const _WIN64 = arch === "x64";

export const VOID = ref.types.void;
export const ENUM = ref.types.uint32;
export const DWORD = ref.types.ulong;
export const WORD = ref.types.uint16;
export const SHORT = ref.types.int16;
export const BYTE = ref.types.byte;
export const WCHAR = ref.types.uint16;

export const ACCESS_MASK = ref.types.int32; //https://docs.microsoft.com/en-us/windows/win32/secauthz/access-mask-format
export const ATOM = ref.types.uint16;
export const PVOID = _WIN64 ? ref.refType(ref.types.uint64) : ref.refType(ref.types.uint32);
export const HANDLE = _WIN64 ? ref.types.uint64 : ref.types.uint32; //Store number (memory address) instead of Buffer (PVOID)
export const HANDLE_PVOID = PVOID; //struct (Buffer)
export const LONG_PTR = _WIN64 ? ref.refType(ref.types.int64) : ref.refType(ref.types.long);
export const ULONG_PTR = _WIN64 ? ref.refType(ref.types.uint64) : ref.refType(ref.types.ulong);

export const BOOL = ref.types.int;
export const BOOLEAN = ref.types.bool;
export const CALLBACK = ref.types.pointer;
export const CCHAR = ref.types.uint8;
export const CHAR = ref.types.uint8;
export const COLORREF = DWORD;
export const DWORDLONG = ref.types.uint64;
export const DWORD_PTR = ULONG_PTR;
export const DWORD32 = ref.types.uint32;
export const DWORD64 = ref.types.uint64;
export const FLOAT = ref.types.float;
export const HACCEL = HANDLE;
export const HALF_PTR = _WIN64 ? ref.types.int32 : SHORT;
export const HBITMAP = HANDLE;
export const HBRUSH = HANDLE;
export const HCOLORSPACE = HANDLE;
export const HCONV = HANDLE;
export const HCONVLIST = HANDLE;
export const HCURSOR = HANDLE;
export const HDC = HANDLE;
export const HDDEDATA = HANDLE;
export const HDESK = HANDLE;
export const HDROP = HANDLE;
export const HDWP = HANDLE;
export const HENHMETAFILE = HANDLE;
export const HFILE = HANDLE;
export const HFONT = HANDLE;
export const HGDIOBJ = HANDLE;
export const HGLOBAL = HANDLE;
export const HHOOK = HANDLE;
export const HICON = HANDLE;
export const HINSTANCE = HANDLE;
export const HKEY = HANDLE;
export const HKL = HANDLE;
export const HLOCAL = HANDLE;
export const HMENU = HANDLE;
export const HMETAFILE = HANDLE;
export const HMODULE = HINSTANCE;
export const HMONITOR = HANDLE;
export const HPALETTE = HANDLE;
export const HPEN = HANDLE;
export const HRESULT = ref.types.long;
export const HRGN = HANDLE;
export const HRSRC = HANDLE;
export const HSZ = HANDLE;
export const HWINEVENTHOOK = HANDLE;
export const HWINSTA = HANDLE;
export const HWND = HANDLE;
export const INT =  ref.types.int;
export const INT_PTR = _WIN64 ? ref.types.int64 : ref.types.int32;
export const INT8 = ref.types.int8;
export const INT16 = ref.types.int16;
export const INT32 = ref.types.int32;
export const INT64 = ref.types.int64;
export const LANGID = WORD;
export const LCID = DWORD;
export const LCTYPE = DWORD;
export const LGRPID = DWORD;
export const LONG = ref.types.long;
export const LONGLONG = ref.types.longlong;
export const LONG32 = ref.types.int32;
export const LONG64 = ref.types.int64;
export const LPARAM = LONG_PTR;
export const LPBOOL = BOOL;
export const LPBYTE = ref.refType(ref.types.byte);
export const LPCOLORREF = DWORD;
export const LPCSTR = ref.types.CString;
export const LPCTSTR = ref.types.CString;
export const LPCWSTR = ref.types.CString;
export const LPVOID = ref.refType(ref.types.void);
export const LPCVOID = LPVOID;
export const LPDWORD = ref.refType(ref.types.uint16);
export const LPHANDLE = _WIN64 ? ref.refType(ref.types.int64) : ref.refType(ref.types.int32);
export const LPINT = ref.refType(ref.types.int);
export const LPLONG = ref.refType(ref.types.int32);
export const LPMSG = ref.types.pointer;
export const LPPOINT = ref.types.pointer;
export const LPSTR = ref.refType(ref.types.char);
export const LPWSTR = ref.refType(ref.types.uint16);
export const LPTSTR = ref.refType(ref.types.uint16);
export const LPWORD = ref.refType(ref.types.uint16);
export const LRESULT = LONG_PTR;
export const NTSTATUS = ref.types.uint32;
export const PBOOL = ref.refType(ref.types.int);
export const PBOOLEAN = ref.refType(ref.types.bool);
export const PBYTE = ref.refType(ref.types.byte);
export const PCHAR = ref.refType(ref.types.char);
export const PCSTR = ref.refType(ref.types.uint8);
export const PCTSTR = _WIN64 ? ref.refType(ref.types.int16) : ref.refType(ref.types.int8);
export const PCWSTR = ref.refType(ref.types.uint16);
export const PDWORD = ref.refType(ref.types.uint32);
export const PDWORDLONG = ref.refType(ref.types.uint64);
export const PDWORD_PTR = DWORD_PTR;
export const PDWORD32 = ref.refType(ref.types.uint32);
export const PDWORD64 = ref.refType(ref.types.uint64);
export const PFLOAT = ref.refType(ref.types.float);
export const PHALF_PTR = ref.types.pointer;
export const PHANDLE = _WIN64 ? ref.refType(ref.refType(ref.types.uint64)) : ref.refType(ref.refType(ref.types.uint32));
export const PHKEY = _WIN64 ? ref.refType(ref.refType(ref.types.uint64)) : ref.refType(ref.refType(ref.types.uint32));
export const PINT = ref.refType(ref.types.int);
export const PINT_PTR = ref.refType(ref.refType(ref.types.int));
export const PINT8 = ref.refType(ref.types.int8);
export const PINT16 = ref.refType(ref.types.int16);
export const PINT32 = ref.refType(ref.types.int32);
export const PINT64 = ref.refType(ref.types.int64);
export const PLCID = ref.refType(ref.types.uint32);
export const PLONG = ref.refType(ref.types.long);
export const PLONGLONG = ref.refType(ref.types.int64);
export const PLONG_PTR = ref.types.pointer;
export const PLONG32 = ref.refType(ref.types.int32);
export const PLONG64 = ref.refType(ref.types.int64);
export const POINTER_32 = ref.refType(ref.types.int32);
export const POINTER_64 = _WIN64 ? ref.refType(ref.types.int64) : ref.refType(ref.types.int32);
export const POINTER_SIGNED = ref.types.pointer;
export const POINTER_UNSIGNED = ref.types.pointer;
export const PSHORT = ref.refType(ref.types.int16);
export const PSIZE_T = ULONG_PTR;
export const PSSIZE_T = ref.types.pointer;
export const PSTR = ref.refType(ref.types.char);
export const PTBYTE = ref.refType(ref.types.int16);
export const PTCHAR = ref.refType(ref.types.uint16);
export const PTSTR = ref.refType(ref.types.uint16);
export const PUCHAR = ref.types.pointer;
export const PUHALF_PTR = ref.types.pointer;
export const PUINT = ref.refType(ref.types.uint);
export const PUINT_PTR = ref.refType(ref.refType(ref.types.uint));
export const PUINT8 = ref.refType(ref.types.uint8);
export const PUINT16 = ref.refType(ref.types.uint16);
export const PUINT32 = ref.refType(ref.types.uint32);
export const PUINT64 = ref.refType(ref.types.uint64);
export const PULONG = ref.refType(ref.types.uint);
export const PULONGLONG = ref.refType(ref.types.uint64);
export const PULONG_PTR = ref.refType(ref.refType(ref.types.uint64));
export const PULONG32 = ref.refType(ref.types.uint);
export const PULONG64 = ref.refType(ref.types.uint64);
export const PUSHORT = ref.refType(ref.types.uint16);
export const PWCHAR = ref.refType(ref.types.uint16);
export const PWORD = ref.refType(ref.types.uint16);
export const PWSTR = ref.refType(ref.types.uint16);
export const QWORD = ref.refType(ref.types.uint64);
export const SC_HANDLE = HANDLE;
export const SC_LOCK = LPVOID;
export const SERVICE_STATUS_HANDLE = HANDLE;
export const SIZE_T = ULONG_PTR;
export const SSIZE_T = LONG_PTR;
export const TBYTE = ref.types.int16;
export const TCHAR = ref.types.uint16;
export const UCHAR = ref.types.uchar;
export const UHALF_PTR = _WIN64 ? ref.types.uint32 : ref.types.uint16;
export const UINT = ref.types.uint;
export const UINT_PTR = _WIN64 ? ref.types.uint64 : ref.types.uint32;
export const UINT8 = ref.types.uint8;
export const UINT16 = ref.types.uint16;
export const UINT32 = ref.types.uint32;
export const UINT64 = ref.types.uint64;
export const ULONG = ref.types.ulong;
export const ULONGLONG = ref.types.ulonglong;
export const ULONG32 = ref.types.uint32;
export const ULONG64 = ref.types.uint64;
export const USHORT = ref.types.ushort;
export const USN = LONGLONG;
export const WPARAM = UINT_PTR;